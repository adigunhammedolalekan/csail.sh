// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/saas/hostgolang/pkg/repository (interfaces: DeploymentRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	types "github.com/saas/hostgolang/pkg/types"
	io "io"
	reflect "reflect"
)

// MockDeploymentRepository is a mock of DeploymentRepository interface
type MockDeploymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentRepositoryMockRecorder
}

// MockDeploymentRepositoryMockRecorder is the mock recorder for MockDeploymentRepository
type MockDeploymentRepositoryMockRecorder struct {
	mock *MockDeploymentRepository
}

// NewMockDeploymentRepository creates a new mock instance
func NewMockDeploymentRepository(ctrl *gomock.Controller) *MockDeploymentRepository {
	mock := &MockDeploymentRepository{ctrl: ctrl}
	mock.recorder = &MockDeploymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeploymentRepository) EXPECT() *MockDeploymentRepositoryMockRecorder {
	return m.recorder
}

// CheckRelease mocks base method
func (m *MockDeploymentRepository) CheckRelease(arg0 uint, arg1 io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRelease", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRelease indicates an expected call of CheckRelease
func (mr *MockDeploymentRepositoryMockRecorder) CheckRelease(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRelease", reflect.TypeOf((*MockDeploymentRepository)(nil).CheckRelease), arg0, arg1)
}

// CreateDeployment mocks base method
func (m *MockDeploymentRepository) CreateDeployment(arg0 *types.App, arg1 io.Reader) (*types.DeploymentResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeployment", arg0, arg1)
	ret0, _ := ret[0].(*types.DeploymentResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeployment indicates an expected call of CreateDeployment
func (mr *MockDeploymentRepositoryMockRecorder) CreateDeployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockDeploymentRepository)(nil).CreateDeployment), arg0, arg1)
}

// CreateDockerDeployment mocks base method
func (m *MockDeploymentRepository) CreateDockerDeployment(arg0 *types.App, arg1 string) (*types.DeploymentResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDockerDeployment", arg0, arg1)
	ret0, _ := ret[0].(*types.DeploymentResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDockerDeployment indicates an expected call of CreateDockerDeployment
func (mr *MockDeploymentRepositoryMockRecorder) CreateDockerDeployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDockerDeployment", reflect.TypeOf((*MockDeploymentRepository)(nil).CreateDockerDeployment), arg0, arg1)
}

// CreateOrUpdateDeploymentSettings mocks base method
func (m *MockDeploymentRepository) CreateOrUpdateDeploymentSettings(arg0, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateDeploymentSettings", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateDeploymentSettings indicates an expected call of CreateOrUpdateDeploymentSettings
func (mr *MockDeploymentRepositoryMockRecorder) CreateOrUpdateDeploymentSettings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateDeploymentSettings", reflect.TypeOf((*MockDeploymentRepository)(nil).CreateOrUpdateDeploymentSettings), arg0, arg1)
}

// CreateRelease mocks base method
func (m *MockDeploymentRepository) CreateRelease(arg0 uint, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelease", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRelease indicates an expected call of CreateRelease
func (mr *MockDeploymentRepositoryMockRecorder) CreateRelease(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelease", reflect.TypeOf((*MockDeploymentRepository)(nil).CreateRelease), arg0, arg1, arg2)
}

// GetApplicationLogs mocks base method
func (m *MockDeploymentRepository) GetApplicationLogs(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationLogs", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationLogs indicates an expected call of GetApplicationLogs
func (mr *MockDeploymentRepositoryMockRecorder) GetApplicationLogs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationLogs", reflect.TypeOf((*MockDeploymentRepository)(nil).GetApplicationLogs), arg0)
}

// GetDeploymentSettings mocks base method
func (m *MockDeploymentRepository) GetDeploymentSettings(arg0 uint) (*types.DeploymentSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentSettings", arg0)
	ret0, _ := ret[0].(*types.DeploymentSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentSettings indicates an expected call of GetDeploymentSettings
func (mr *MockDeploymentRepositoryMockRecorder) GetDeploymentSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentSettings", reflect.TypeOf((*MockDeploymentRepository)(nil).GetDeploymentSettings), arg0)
}

// GetRelease mocks base method
func (m *MockDeploymentRepository) GetRelease(arg0 uint) (*types.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelease", arg0)
	ret0, _ := ret[0].(*types.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelease indicates an expected call of GetRelease
func (mr *MockDeploymentRepositoryMockRecorder) GetRelease(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelease", reflect.TypeOf((*MockDeploymentRepository)(nil).GetRelease), arg0)
}

// GetReleases mocks base method
func (m *MockDeploymentRepository) GetReleases(arg0 uint) ([]types.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleases", arg0)
	ret0, _ := ret[0].([]types.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReleases indicates an expected call of GetReleases
func (mr *MockDeploymentRepositoryMockRecorder) GetReleases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleases", reflect.TypeOf((*MockDeploymentRepository)(nil).GetReleases), arg0)
}

// HasRegistryAuthorization mocks base method
func (m *MockDeploymentRepository) HasRegistryAuthorization(arg0 *types.AuthorizationRequest) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRegistryAuthorization", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasRegistryAuthorization indicates an expected call of HasRegistryAuthorization
func (mr *MockDeploymentRepositoryMockRecorder) HasRegistryAuthorization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRegistryAuthorization", reflect.TypeOf((*MockDeploymentRepository)(nil).HasRegistryAuthorization), arg0)
}

// RollbackDeployment mocks base method
func (m *MockDeploymentRepository) RollbackDeployment(arg0 uint, arg1 string) (*types.DeploymentResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackDeployment", arg0, arg1)
	ret0, _ := ret[0].(*types.DeploymentResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackDeployment indicates an expected call of RollbackDeployment
func (mr *MockDeploymentRepositoryMockRecorder) RollbackDeployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackDeployment", reflect.TypeOf((*MockDeploymentRepository)(nil).RollbackDeployment), arg0, arg1)
}

// UpdateEnvironmentVars mocks base method
func (m *MockDeploymentRepository) UpdateEnvironmentVars(arg0 *types.App, arg1 []types.Environment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentVars", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEnvironmentVars indicates an expected call of UpdateEnvironmentVars
func (mr *MockDeploymentRepositoryMockRecorder) UpdateEnvironmentVars(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentVars", reflect.TypeOf((*MockDeploymentRepository)(nil).UpdateEnvironmentVars), arg0, arg1)
}
