// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/saas/hostgolang/pkg/repository (interfaces: AppsRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	types "github.com/saas/hostgolang/pkg/types"
	reflect "reflect"
)

// MockAppsRepository is a mock of AppsRepository interface
type MockAppsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAppsRepositoryMockRecorder
}

// MockAppsRepositoryMockRecorder is the mock recorder for MockAppsRepository
type MockAppsRepositoryMockRecorder struct {
	mock *MockAppsRepository
}

// NewMockAppsRepository creates a new mock instance
func NewMockAppsRepository(ctrl *gomock.Controller) *MockAppsRepository {
	mock := &MockAppsRepository{ctrl: ctrl}
	mock.recorder = &MockAppsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppsRepository) EXPECT() *MockAppsRepositoryMockRecorder {
	return m.recorder
}

// CreateApp mocks base method
func (m *MockAppsRepository) CreateApp(arg0, arg1 string, arg2 uint) (*types.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApp", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApp indicates an expected call of CreateApp
func (mr *MockAppsRepositoryMockRecorder) CreateApp(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApp", reflect.TypeOf((*MockAppsRepository)(nil).CreateApp), arg0, arg1, arg2)
}

// CreateDomain mocks base method
func (m *MockAppsRepository) CreateDomain(arg0 uint, arg1 string) (*types.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDomain", arg0, arg1)
	ret0, _ := ret[0].(*types.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDomain indicates an expected call of CreateDomain
func (mr *MockAppsRepositoryMockRecorder) CreateDomain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDomain", reflect.TypeOf((*MockAppsRepository)(nil).CreateDomain), arg0, arg1)
}

// DeleteEnvironmentVars mocks base method
func (m *MockAppsRepository) DeleteEnvironmentVars(arg0 string, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentVars", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEnvironmentVars indicates an expected call of DeleteEnvironmentVars
func (mr *MockAppsRepositoryMockRecorder) DeleteEnvironmentVars(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentVars", reflect.TypeOf((*MockAppsRepository)(nil).DeleteEnvironmentVars), arg0, arg1)
}

// GetAccountApps mocks base method
func (m *MockAppsRepository) GetAccountApps(arg0 uint) ([]types.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountApps", arg0)
	ret0, _ := ret[0].([]types.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountApps indicates an expected call of GetAccountApps
func (mr *MockAppsRepositoryMockRecorder) GetAccountApps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountApps", reflect.TypeOf((*MockAppsRepository)(nil).GetAccountApps), arg0)
}

// GetApp mocks base method
func (m *MockAppsRepository) GetApp(arg0 string) (*types.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApp", arg0)
	ret0, _ := ret[0].(*types.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApp indicates an expected call of GetApp
func (mr *MockAppsRepositoryMockRecorder) GetApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockAppsRepository)(nil).GetApp), arg0)
}

// GetAppById mocks base method
func (m *MockAppsRepository) GetAppById(arg0 uint) (*types.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppById", arg0)
	ret0, _ := ret[0].(*types.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppById indicates an expected call of GetAppById
func (mr *MockAppsRepositoryMockRecorder) GetAppById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppById", reflect.TypeOf((*MockAppsRepository)(nil).GetAppById), arg0)
}

// GetDomain mocks base method
func (m *MockAppsRepository) GetDomain(arg0 string) (*types.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain", arg0)
	ret0, _ := ret[0].(*types.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomain indicates an expected call of GetDomain
func (mr *MockAppsRepositoryMockRecorder) GetDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockAppsRepository)(nil).GetDomain), arg0)
}

// GetDomainByAppId mocks base method
func (m *MockAppsRepository) GetDomainByAppId(arg0 uint) (*types.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainByAppId", arg0)
	ret0, _ := ret[0].(*types.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainByAppId indicates an expected call of GetDomainByAppId
func (mr *MockAppsRepositoryMockRecorder) GetDomainByAppId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainByAppId", reflect.TypeOf((*MockAppsRepository)(nil).GetDomainByAppId), arg0)
}

// GetEnvironmentVars mocks base method
func (m *MockAppsRepository) GetEnvironmentVars(arg0 string) ([]types.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentVars", arg0)
	ret0, _ := ret[0].([]types.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentVars indicates an expected call of GetEnvironmentVars
func (mr *MockAppsRepositoryMockRecorder) GetEnvironmentVars(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentVars", reflect.TypeOf((*MockAppsRepository)(nil).GetEnvironmentVars), arg0)
}

// GetPlan mocks base method
func (m *MockAppsRepository) GetPlan(arg0 uint) (*types.Plan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlan", arg0)
	ret0, _ := ret[0].(*types.Plan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlan indicates an expected call of GetPlan
func (mr *MockAppsRepositoryMockRecorder) GetPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlan", reflect.TypeOf((*MockAppsRepository)(nil).GetPlan), arg0)
}

// ListRunningInstances mocks base method
func (m *MockAppsRepository) ListRunningInstances(arg0 string) ([]types.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunningInstances", arg0)
	ret0, _ := ret[0].([]types.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRunningInstances indicates an expected call of ListRunningInstances
func (mr *MockAppsRepositoryMockRecorder) ListRunningInstances(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunningInstances", reflect.TypeOf((*MockAppsRepository)(nil).ListRunningInstances), arg0)
}

// PodExec mocks base method
func (m *MockAppsRepository) PodExec(arg0, arg1 string, arg2 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodExec", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodExec indicates an expected call of PodExec
func (mr *MockAppsRepositoryMockRecorder) PodExec(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodExec", reflect.TypeOf((*MockAppsRepository)(nil).PodExec), arg0, arg1, arg2)
}

// RemoveDomain mocks base method
func (m *MockAppsRepository) RemoveDomain(arg0 uint, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDomain", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDomain indicates an expected call of RemoveDomain
func (mr *MockAppsRepositoryMockRecorder) RemoveDomain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDomain", reflect.TypeOf((*MockAppsRepository)(nil).RemoveDomain), arg0, arg1)
}

// ScaleApp mocks base method
func (m *MockAppsRepository) ScaleApp(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScaleApp", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScaleApp indicates an expected call of ScaleApp
func (mr *MockAppsRepositoryMockRecorder) ScaleApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleApp", reflect.TypeOf((*MockAppsRepository)(nil).ScaleApp), arg0, arg1)
}

// UpdateEnvironmentVars mocks base method
func (m *MockAppsRepository) UpdateEnvironmentVars(arg0 string, arg1 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentVars", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEnvironmentVars indicates an expected call of UpdateEnvironmentVars
func (mr *MockAppsRepositoryMockRecorder) UpdateEnvironmentVars(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentVars", reflect.TypeOf((*MockAppsRepository)(nil).UpdateEnvironmentVars), arg0, arg1)
}

// UpdatePlan mocks base method
func (m *MockAppsRepository) UpdatePlan(arg0 uint, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlan", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlan indicates an expected call of UpdatePlan
func (mr *MockAppsRepositoryMockRecorder) UpdatePlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlan", reflect.TypeOf((*MockAppsRepository)(nil).UpdatePlan), arg0, arg1)
}
