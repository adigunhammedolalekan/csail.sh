// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/saas/hostgolang/pkg/repository (interfaces: ResourcesDeployment)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	types "github.com/saas/hostgolang/pkg/types"
	io "io"
	reflect "reflect"
)

// MockResourcesDeployment is a mock of ResourcesDeployment interface
type MockResourcesDeployment struct {
	ctrl     *gomock.Controller
	recorder *MockResourcesDeploymentMockRecorder
}

// MockResourcesDeploymentMockRecorder is the mock recorder for MockResourcesDeployment
type MockResourcesDeploymentMockRecorder struct {
	mock *MockResourcesDeployment
}

// NewMockResourcesDeployment creates a new mock instance
func NewMockResourcesDeployment(ctrl *gomock.Controller) *MockResourcesDeployment {
	mock := &MockResourcesDeployment{ctrl: ctrl}
	mock.recorder = &MockResourcesDeploymentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourcesDeployment) EXPECT() *MockResourcesDeploymentMockRecorder {
	return m.recorder
}

// DeleteResource mocks base method
func (m *MockResourcesDeployment) DeleteResource(arg0 *types.App, arg1 uint, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResource indicates an expected call of DeleteResource
func (mr *MockResourcesDeploymentMockRecorder) DeleteResource(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockResourcesDeployment)(nil).DeleteResource), arg0, arg1, arg2)
}

// DeployResource mocks base method
func (m *MockResourcesDeployment) DeployResource(arg0 *types.DeployResourcesOpt) (*types.ResourceDeploymentResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployResource", arg0)
	ret0, _ := ret[0].(*types.ResourceDeploymentResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployResource indicates an expected call of DeployResource
func (mr *MockResourcesDeploymentMockRecorder) DeployResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployResource", reflect.TypeOf((*MockResourcesDeployment)(nil).DeployResource), arg0)
}

// DumpDatabase mocks base method
func (m *MockResourcesDeployment) DumpDatabase(arg0 *types.App, arg1 string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DumpDatabase", arg0, arg1)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DumpDatabase indicates an expected call of DumpDatabase
func (mr *MockResourcesDeploymentMockRecorder) DumpDatabase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpDatabase", reflect.TypeOf((*MockResourcesDeployment)(nil).DumpDatabase), arg0, arg1)
}

// GetResource mocks base method
func (m *MockResourcesDeployment) GetResource(arg0 uint, arg1 string) (*types.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", arg0, arg1)
	ret0, _ := ret[0].(*types.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource
func (mr *MockResourcesDeploymentMockRecorder) GetResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockResourcesDeployment)(nil).GetResource), arg0, arg1)
}

// GetResourceEnvs mocks base method
func (m *MockResourcesDeployment) GetResourceEnvs(arg0, arg1 uint) ([]types.ResourceEnv, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceEnvs", arg0, arg1)
	ret0, _ := ret[0].([]types.ResourceEnv)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceEnvs indicates an expected call of GetResourceEnvs
func (mr *MockResourcesDeploymentMockRecorder) GetResourceEnvs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceEnvs", reflect.TypeOf((*MockResourcesDeployment)(nil).GetResourceEnvs), arg0, arg1)
}
